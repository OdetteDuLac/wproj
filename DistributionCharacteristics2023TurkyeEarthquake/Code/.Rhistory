# download, unzip, and read
url <- "https://s3.us-east-1.amazonaws.com/exports-stage.hotosm.org/hotosm_tur_destroyed_buildings_polygons_csv_csv_uid_d3ce51f1-f046-4df9-b0df-2059159c0ece.zip"
temp <- tempfile()
download.file(url, temp)
buildings <- read.csv(unz(temp, "hotosm_tur_destroyed_buildings_polygons_csv.csv"))
unlink(temp)
# save dataset; files can be overwritten when .Rmd is run
write.csv(buildings, row.names = FALSE, file = here("Data/Tabular/TUR_HDX_destroyedBuildings.csv"))
# Chunk 6: dataload4
### twitter earthquake communications data from UN OCHA HDX portal; data set updated monthly
# download data
# download.file("https://data.humdata.org/dataset/a22adc4d-4ae3-4252-a9ba-5d7278f17282/resource/ae7a53d1-7e09-4eaa-9790-13ddcb140e62/download/help_requests_twitter.xlsx",  here("Data/Tabular/TUR_HDX_twitterHelp.xlsx"))
#
# download.file("https://data.humdata.org/dataset/a22adc4d-4ae3-4252-a9ba-5d7278f17282/resource/ed7a25db-e2fb-402a-a433-e3da0b62d3c4/download/shelter_requests_twitter.xlsx",  here("Data/Tabular/TUR_HDX_twitterShelter.xlsx"))
#
# download.file("https://data.humdata.org/dataset/a22adc4d-4ae3-4252-a9ba-5d7278f17282/resource/1e6539f1-d7c0-40d2-bfe9-09f4dd0485c7/download/missing_people_reports_twitter.xlsx",  here("Data/Tabular/TUR_HDX_twitterMissingPeople.xlsx"))
#
# download.file("https://data.humdata.org/dataset/a22adc4d-4ae3-4252-a9ba-5d7278f17282/resource/3f8c3277-cd31-4952-884f-c8ebe2188a00/download/damage_images_twitter.xlsx",  here("Data/Tabular/TUR_HDX_twitterDamageImages.xlsx"))
# read in data
twt.help <- as.data.frame(read_excel(here("Data/Tabular/TUR_HDX_twitterHelp.xlsx")))
twt.shelter <- as.data.frame(read_excel(here("Data/Tabular/TUR_HDX_twitterShelter.xlsx")))
twt.missingPeople <- as.data.frame(read_excel( here("Data/Tabular/TUR_HDX_twitterMissingPeople.xlsx")))
twt.damageImages <- as.data.frame(read_excel(here("Data/Tabular/TUR_HDX_twitterDamageImages.xlsx")))
# Chunk 7: datasetInfo
# create data frame of data set information
datasets <- c("Administrative Boundary Layers", "Earthquake Data", "Destroyed Buildings Data", "Twitter Activity Data")
description <- c("polygons", "points", "points", "points aggregated to ADM 2 polygons")
variables <- c("name; type (ADM level); geometry", "date/time; latitude; longitude; depth (km); magnitude; place; measures of error; measurement sources; ID", "source; damage_event; date; longigute; latitude", "district; population; frequency of images; frequency of tweets; impact score; impact category")
information <- c("ADM 0, ADM 1, and ADM 2", "earthquakes Feb. 5-Mar. 5, 2023", "destroyed buildings", "help requests, shelter requests, missing people reports, damage reports (images)")
projection <- c("4326", "4326", "4326", "NA")
format <- c("shapefile", ".csv", ".csv", ".xlsx")
sources <- c("geoBoundaries", "USGS Earthquake Catalog", "UN OCHA HDX", "UN OCHA HDX")
datasets.df <- data.frame(datasets, description, variables, information, projection, format, sources)
#Use the `kable` function to produce the table
knitr::kable(datasets.df, caption = "Summary of Datasets", col.names = c("Name","Description", "Variables", "Information", "Original Projection", "Format", "Source"))
# Chunk 8: exploratoryMapsPlots1
## Administrative Boundaries
# plot and check administrative boundaries
mapviewOptions(basemaps = "CartoDB.Positron")
mapView(list(tur.adm0, tur.adm1, tur.adm2),
col.regions = list("lightblue","lavender", "darkgreen"),
label = list(as.character(tur.adm0$shapeName), as.character(tur.adm1$shapeName), as.character(tur.adm2$shapeName)),
layer.name = list("Turkiye", "Turkiye Provinces", "Turkiye Districts"))
# Chunk 9: exploratoryMapsPlots2
## Earthquake Data
# preview data
head(EQC.data.df)
# plot earthquake points to see quick distribution
ggplot()+
geom_sf(data = tur.adm0, fill = "azure", color = "darkgray") +
geom_point(data = EQC.data.df, aes(x=latitude, y=longitude), color = "darkred", size = 0.5) +
labs(title = "Turkiye Earthquakes Feb. 5-Mar. 5, 2023")
# Chunk 10: exploratoryMapsPlots3
## Destroyed Building Data
# dataset summary
summary(buildings)
# plot destroyed buildings points to see quick distribution
ggplot()+
geom_sf(data = tur.adm0, fill = "azure", color = "darkgray") +
geom_point(data = buildings, aes(x=latitude, y=longitude), color = "darkorange3", size = 0.5) +
labs(title = "Turkiye: Buildings Destroyed in Earthquakes")
#########################
### Spatial Interpolation
#########################
### create spatially interpolated raster surfaces for earthquake and damaged building data
## Earthquake Data: Setup
# maker= EQC df an sf object
EQC.data.sf <- st_as_sf(EQC.data.df, coords = c("longitude", "latitude"), crs = 4326)
# reproject to projected coordinate system from geographic; ESPG 23035; unit = meters
EQC.data.sf.reproj <- st_transform(EQC.data.sf, crs = 23035)
tur.adm0.reproj <- st_transform(tur.adm0, crs = 23035)
tur.adm1.reproj <- st_transform(tur.adm1, crs = 23035)
tur.adm2.reproj <- st_transform(tur.adm2, crs = 23035)
# build blank raster at 10 km resolution; put in same crs as EQC data
blank.rast <- raster(tur.adm0.reproj, res = 10000)
## Earthquake Data: Depth
# formula gstat object; idp = 2 is inverse distance weight interpolation to power of 2
gs.depth <- gstat(formula = depth ~ 1, locations = EQC.data.sf.reproj, set=list(idp = 2))
# interpolate to blank raster
idw.depth <- interpolate (blank.rast, gs.depth, debug.level = 0)
# final idw interpolated raster
idw.rast.depth <- mask(idw.depth, tur.adm0.reproj)
## Earthquake Data: Magnitude
# formula gstat object; idp = 2 is inverse distance weight interpolation to power of 2
gs.mag <- gstat(formula = mag ~ 1, locations = EQC.data.sf.reproj, set=list(idp = 2))
# interpolate to blank raster
idw.mag <- interpolate (blank.rast, gs.mag, debug.level = 0)
# final idw interpolated raster
idw.rast.mag <- mask(idw.mag, tur.adm0.reproj)
# reproject buildings to projected coordinate system from geographic to visualize with rasters
# ESPG 23035; unit = meters
buildings.sf <- st_as_sf(buildings, coords = c("longitude", "latitude"), crs = 4326)
buildings.sf.reproj <- st_transform(buildings.sf, crs = 23035)
# write rasters
writeRaster(idw.rast.depth, here("Data/Rasters/TUR_EQC_idw_depth.tif"), format = "GTiff", overwrite = TRUE)
writeRaster(idw.rast.mag, here("Data/Rasters/TUR_EQC_idw_magnitude.tif"), format = "GTiff", overwrite = TRUE)
# create rater dataframes for ggplot
idw.depth.df <- as.data.frame(idw.rast.depth, xy=TRUE) %>% drop_na()
idw.mag.df <- as.data.frame(idw.rast.mag, xy=TRUE)
SummaryPlot <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = 'darkgray') +
geom_sf(data = EQC.data.sf.reproj, fill = mag) +
geom_sf(data = EQSummary, color = 'red') +
labs(title = "The Two Largest Magnitudes Compared to the Lesser Magnitude Locations",
fill = "Locations of the Largest Earthquake Magnitudes",
x = "Longitude",
y = "Longitude") +
theme(legend.position = "bottom",
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
SummaryPlot <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = 'darkgray') +
geom_sf(data = EQC.data.sf.reproj, aes(fill = mag))+
geom_sf(data = EQSummary, color = 'red') +
labs(title = "The Two Largest Magnitudes Compared to the Lesser Magnitude Locations",
fill = "Locations of the Largest Earthquake Magnitudes",
x = "Longitude",
y = "Longitude") +
theme(legend.position = "bottom",
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
SummaryPlot
SummaryPlot <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = 'darkgray') +
geom_sf(data = EQC.data.sf.reproj, aes(color = mag))+
geom_sf(data = EQSummary, color = 'red') +
labs(title = "The Two Largest Magnitudes Compared to the Lesser Magnitude Locations",
fill = "Locations of the Largest Earthquake Magnitudes",
x = "Longitude",
y = "Longitude") +
theme(legend.position = "bottom",
legend.text = element_text(size = 12),
legend.title = element_text(size = 12))
SummaryPlot
ggplot(df, aes(x = x, color = group)) +
geom_density(alpha = 0.5)
#
ggplot() +
geom_sf(data = distSF, fill = "gold", size = 0.1) +
geom_sf(data = stateSF, color = "white", fill = NA) +
geom_sf(data = countryborder, color = "blue", fill = NA)
ggplot()+
geom_raster(data = idw.depth.df, aes(x=x, y=y, fill=var1.pred), ) +
scale_fill_viridis_c(name = "depth (km)") +
geom_sf(data = buildings.sf.reproj, color = "brown", size = 0.5) +
geom_sf(data = tur.adm2.reproj, fill = "transparent", size = 0.3)
ggplot()+
geom_raster(data = idw.depth.df, aes(x=x, y=y, fill=var1.pred)) +
scale_fill_viridis_c(name = "depth (km)") +
geom_sf(data = buildings.sf.reproj, color = "brown", size = 0.5) +
geom_sf(data = tur.adm2.reproj, fill = "transparent", size = 0.3)
TwtHelpJoin <- merge(x = tur.adm2.reproj,
y = twt.help,
by.x = "shapeName",
by.y = "district")
dim(TwtHelpJoin)
TwtMissPersons <- merge(x = tur.adm2.reproj,
y = twt.missingPeople,
by.x = "shapeName",
by.y = "district")
TwtShelter <- merge(x = tur.adm2.reproj,
y = twt.shelter,
by.x = "shapeName",
by.y = "district")
TwtDamage <- merge(x = tur.adm2.reproj,
y = twt.damageImages,
by.x = "shapeName",
by.y = "district")
mytheme <- theme_classic(base_size = 14) +
theme(axis.text = element_text(color = "black"),
legend.position = "top")
Defaultplot <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = buildings.sf, color = "brown", size = 0.5)
Defaultplot
Defaultplot <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = buildings.sf.reproj, color = "brown", size = 0.5)
Defaultplot
#help twitter data
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_color_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
print(TWTDataHelp)
#help twitter data
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_color_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
#help twitter data
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_discrete(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_binned(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
display.brewer.pal(4, "YlOrRd")
library("RColorBrewer")
brewer.pal(4, "YlOrRd")
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_colour_manual(values = c("Very High" = "#E31A1C", "High" = "#FD8D3C", "Medium" = "#FECC5C", "Low" = "#FFFFB2", "No Reports" = "darkgray")) +
#scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_colour_manual(values = c(Very High = "#E31A1C", High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2", No Reports = "darkgray")) +
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_colour_manual(values = c(High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2")) +
#scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_manual(values = c(High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2")) +
#scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_manual(values = c(Very High = "#E31A1C", High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2", No Reports = "darkgray")) +
View(twt.missingPeople)
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_manual(values = c("Very High" = "#E31A1C", High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2", "No Reports" = "darkgray")) +
#scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'red') +
scale_fill_manual(values = c("Very High" = "#E31A1C", High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2", "No Reports" = "darkgray"), breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
#scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'darkblue') +
scale_fill_manual(values = c("Very High" = "#E31A1C", High = "#FD8D3C", Medium = "#FECC5C", Low = "#FFFFB2", "No Reports" = "darkgray"), breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
#scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataShelter <- ggplot() +
geom_sf(data = tur.adm2, fill = "transparent") +
geom_sf(data = TwtShelter,
aes(fill = shelter_request_impact_category))+
geom_sf(data = EQSummary, color = 'blue') +
scale_fill_brewer(palette = "YlOrRd") +
labs(fill = "Shelter Request Impact Category") +
ggtitle("Reported Needing Shelter via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataShelter
TWTDataDamage <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtDamage,
aes(fill = damage_impact_category)) +
geom_sf(data = EQSummary, color = 'blue', alpha = 0.5) +
scale_color_manual(values = c('#F0E442', '#FFC425', '#F37735', '#D11141', '#CCCCCC')) +
labs(fill = "Damage Impact Category") +
ggtitle("Reported Damage via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
print(TWTDataDamage)
TWTDataMP <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtMissPersons,
aes(fill = missing_people_reports_impact_category))+
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Missing Persons Impact Category") +
ggtitle("Reported Missing Persons via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataMP
TWTDataDamage <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtDamage,
aes(fill = damage_impact_category)) +
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Damage Impact Category") +
ggtitle("Reported Damage via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataDamage
TWTDataMP <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtMissPersons,
aes(fill = missing_people_reports_impact_category))+
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Missing Persons Impact Category") +
ggtitle("Reported Missing Persons via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataMP
TWTDataDamage <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtDamage,
aes(fill = damage_impact_category)) +
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5, size = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Damage Impact Category") +
ggtitle("Reported Damage via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataDamage
TWTDataHelp <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "azure", color = "darkgray") +
geom_sf(data = TwtHelpJoin, aes(fill = help_request_impact_category)) +
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Help Request Impact Scores") +
ggtitle("Reported Help Requests per Depth Coordinates via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataHelp
TWTDataShelter <- ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtShelter,
aes(fill = shelter_request_impact_category))+
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Shelter Request Impact Category") +
ggtitle("Reported Needing Shelter via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataShelter
TWTDataMP <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtMissPersons,
aes(fill = missing_people_reports_impact_category))+
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Missing Persons Impact Category") +
ggtitle("Reported Missing Persons via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataMP
TWTDataDamage <-  ggplot() +
geom_sf(data = tur.adm2.reproj, fill = "transparent") +
geom_sf(data = TwtDamage,
aes(fill = damage_impact_category)) +
geom_sf(data = EQSummary, color = 'darkblue', alpha = 0.5) +
scale_fill_manual(values =
c("Very High" = "#E31A1C",
High = "#FD8D3C",
Medium = "#FECC5C",
Low = "#FFFFB2",
"No Reports" = "darkgray"),
breaks=c("Very High", 'High', 'Medium', "Low", "No Reports")) +
labs(fill = "Damage Impact Category") +
ggtitle("Reported Damage via Twitter") +
xlab("Longitude") + ylab("Latitude")
theme(legend.position = "bottom",
legend.text = element_text(size= 12),
legend.title = element_text(size = 12))
TWTDataDamage
knit_with_parameters("~/Documents/Professional/Github/wproj/DistributionCharacteristics2023TurkyeEarthquake/Code/DistributionCharacteristics2023TurkyeEarthquake.Rmd")
